package com.assessment.backendConsoleApp.persistence.impl;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.stream.Stream;

import org.springframework.stereotype.Service;

import com.assessment.backendConsoleApp.model.Transaction;
import com.assessment.backendConsoleApp.model.User;
import com.assessment.backendConsoleApp.persistence.IPersistence;
import com.google.gson.Gson;

@Service
public class PersistenceImpl implements IPersistence {

	private String path = "C:\\Users\\Harif Velarde\\eclipse-workspace\\backendConsoleApp\\backendConsoleApp\\src\\main\\resources\\transactions.txt";	
	
	@Override
	public void save(String transaction) throws IOException, ClassNotFoundException {

		try {
			
			File file = new File(path);
			BufferedWriter bw;
			if (file.exists()) {
				bw = new BufferedWriter(new FileWriter(file, true));
				bw.write(transaction);
				bw.newLine();
				bw.close();
			} else {
				bw = new BufferedWriter(new FileWriter(file));
				bw.write(transaction);
				bw.close();
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}

	}

	@Override
	public void getTransactionsByUserId(String userId) throws IOException, ClassNotFoundException {
		ArrayList<String> transactions = new ArrayList<String>();
		Path pathTransactions = Paths.get(path);
		Stream<String> stream = Files.lines(pathTransactions);
		Stream<String> tmp = stream.filter(s -> s.contains(userId));
		tmp.forEach(transactions::add);
		if(transactions.size() > 1) {
			for(String transaction : transactions) {
				System.out.println(transaction);
			}
		}else {
			System.out.println("No matches");
		}
	}

	@Override
	public void getTransactionsByUserIdTransactionId(String userId, String transactionId)
			throws IOException, ClassNotFoundException {
		ArrayList<String> transactions = new ArrayList<String>();
		Transaction result;
		Path pathTransactions = Paths.get(path);
		Stream<String> stream = Files.lines(pathTransactions);
		Stream<String> tmp = stream.filter(s -> s.contains(userId));
		boolean flagFound = false;
		
		tmp.forEach(transactions::add);
		
		if(transactions.size() > 1) {
			for(String transaction : transactions) {
				result = new Gson().fromJson(transaction, Transaction.class);
				if(result.getTransaction_id().equals(transactionId)) {
					System.out.println(transaction);
					flagFound = true;
				}
					
			}
		}
		
		if(!flagFound) {
			System.out.println("Transaction not found");
		}
		
	}

	@Override
	public void getTransactionsSumByUserId(String userId) throws IOException, ClassNotFoundException {
		ArrayList<String> transactions = new ArrayList<String>();
		Transaction result;
		User userResult = new User();
		BigDecimal totalSum = new BigDecimal("0");
		Path pathTransactions = Paths.get(path);
		Stream<String> stream = Files.lines(pathTransactions);
		Stream<String> tmp = stream.filter(s -> s.contains(userId));
		boolean flagFound = false;
		
		tmp.forEach(transactions::add);
		
		if(transactions.size() > 1) {
			for(String transaction : transactions) {
				result = new Gson().fromJson(transaction, Transaction.class);
				totalSum = totalSum.add(result.getAmount());	
			}
		}
		
		userResult.setUserId(userId);
		userResult.setSumTransaction(totalSum);
		
		Gson gson = new Gson();
        String json = gson.toJson(userResult);
        
        System.out.println(json);
	}

}
